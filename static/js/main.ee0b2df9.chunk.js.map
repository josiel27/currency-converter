{"version":3,"sources":["components/selectSymbol/SelectSymbol.js","components/conversor/Converter.js","components/App.js","serviceWorker.js","index.js"],"names":["SelectSymbol","props","arry","i","myJsonSymbols","push","console","log","state","arrySymbols","value","Component","Converter","valueOne","valueTwo","converter","bind","values_for","this","url_coversor","fetch","then","res","json","price_quote","ask","parseFloat","toFixed","setState","error","alert","catch","className","defaultValue","type","placeholder","onChange","event","target","onKeyPress","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"m6IA0BeA,E,YArBb,WAAYC,GAAQ,IAAD,sBACjB,4CAAMA,IACN,IAAIC,EAAO,GACX,IAAK,IAAIC,KAAKC,EACZF,EAAKG,KAAKF,GAJK,OAMjBG,QAAQC,IAAIL,GACZ,EAAKM,MAAQ,CAAEC,YAAaP,GAPX,E,sEAUjB,OACE,gCACE,4BAAQQ,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,a,GAhBmBC,aC4DZC,G,kBA3Db,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAGDO,MAAQ,CAAEK,SAAU,GAAIC,SAAU,GAEvC,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBANA,E,yEASN,IAAD,OACNC,EAAU,UAAMC,KAAKjB,MAAMY,SAAjB,YAA6BK,KAAKjB,MAAMa,UAClDK,EAAY,kDAA8CF,EAA9C,8BAEhBG,MAAMD,GACHE,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAE,GACJ,IACE,IAAIC,EAAcD,EAAK,GAAGE,IACtBX,GACFY,WAAW,EAAKlB,MAAMK,UAAYW,GAClCG,QAAQ,GACV,EAAKC,SAAS,CAAEd,aAChB,MAAOe,GACPvB,QAAQC,IAAIgB,EAAKM,OACjBC,MAAMP,EAAKM,WAGdE,OAAM,SAAAF,GACLvB,QAAQC,IAAIsB,GACZC,MAAMD,Q,+BAIF,IAAD,OACP,OACE,yBAAKG,UAAU,iBACb,2CACA,kBAAC,EAAD,CAAcC,aAAa,QAC3B,kBAAC,EAAD,CAAcA,aAAa,QAC3B,4BACGf,KAAKjB,MAAMY,SADd,SAC8BK,KAAKjB,MAAMa,UAEzC,2BACEkB,UAAU,WACVE,KAAK,SACLC,YAAY,kBACZC,SAAU,SAAAC,GACR,EAAKT,SAAS,CAAEf,SAAUwB,EAAMC,OAAO5B,SAEzC6B,WAAYrB,KAAKH,YAEnB,4BAAKG,KAAKV,MAAMM,e,GAtDAH,c,MCUT6B,MAVf,WACE,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAWnB,SAAS,MAAMC,SAAS,WCIvB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.ee0b2df9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport myJsonSymbols from \"../../teste.json\";\r\n// var myJsonSymbols2 = JSON.stringify(myJsonSymbols);\r\n\r\nclass SelectSymbol extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let arry = [];\r\n    for (let i in myJsonSymbols) {\r\n      arry.push(i);\r\n    }\r\n    console.log(arry);\r\n    this.state = { arrySymbols: arry };\r\n  }\r\n  render() {\r\n    return (\r\n      <select>\r\n        <option value=\"volvo\">Volvo</option>\r\n        <option value=\"saab\">Saab</option>\r\n        <option value=\"opel\">Opel</option>\r\n        <option value=\"audi\">Audi</option>\r\n      </select>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectSymbol;\r\n","import React, { Component } from \"react\";\r\nimport SelectSymbol from \"../selectSymbol/SelectSymbol\";\r\nimport \"./Converter.css\";\r\n\r\nclass Converter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = { valueOne: \"\", valueTwo: 0 };\r\n\r\n    this.converter = this.converter.bind(this);\r\n  }\r\n\r\n  converter() {\r\n    let values_for = `${this.props.valueOne}-${this.props.valueTwo}`;\r\n    let url_coversor = `http://economia.awesomeapi.com.br/jsonp/${values_for}/1?callback=jsonp_callback`;\r\n\r\n    fetch(url_coversor)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(json => {\r\n        try {\r\n          let price_quote = json[0].ask;\r\n          let valueTwo = (\r\n            parseFloat(this.state.valueOne) * price_quote\r\n          ).toFixed(2);\r\n          this.setState({ valueTwo });\r\n        } catch (error) {\r\n          console.log(json.error);\r\n          alert(json.error);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        alert(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"converter-div\">\r\n        <h2> Conversor </h2>\r\n        <SelectSymbol defaultValue=\"BRL\" />\r\n        <SelectSymbol defaultValue=\"USD\" />\r\n        <h4>\r\n          {this.props.valueOne} para {this.props.valueTwo}\r\n        </h4>\r\n        <input\r\n          className=\"valueOne\"\r\n          type=\"number\"\r\n          placeholder=\"Digite um valor\"\r\n          onChange={event => {\r\n            this.setState({ valueOne: event.target.value });\r\n          }}\r\n          onKeyPress={this.converter}\r\n        ></input>\r\n        <h2>{this.state.valueTwo}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Converter;\r\n","import React from \"react\";\r\nimport Converter from \"./conversor/Converter\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Converter valueOne=\"USD\" valueTwo=\"BRL\" />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}